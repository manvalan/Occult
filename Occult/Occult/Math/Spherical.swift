//
//  Spherical.swift
//  Occult
//
//  Created by Michele Bigi on 23/08/18.
//  Copyright Â© 2018 Michele Bigi. All rights reserved.
//

import Foundation

//
//  Spherical.swift
//  Harmonikr
//
//  Created by David Gavilan on 2/8/15.
//  Copyright (c) 2015 David Gavilan. All rights reserved.
//
import Foundation

func Length( a :Vector )->Double {
    return sqrt( a[0] * a[0] + a[1] * a[1] + a[2] * a[2] )
}

class Spherical {
    var r       : Double = 1     ///< Radial distance
    var Î¸       : Double = 0     ///< Inclination (theta) {0,Ï€}
    var Ï†       : Double = 0     ///< Azimuth (phi) {0,2Ï€}
    
    // Maybe I'll hate myself later for using symbols ðŸ˜‚
    // (they aren't difficult to type with Japanese input, type ã‚·ãƒ¼ã‚¿ and ãƒ•ã‚¡ã‚¤)
    init (r: Double, Î¸: Double, Ï†: Double) {
        self.r = r
        self.Î¸ = Î¸
        self.Ï† = Ï†
    }
    
    /// Converts from Cartesian to Spherical coordinates
    init (v: Vector ) {
        r = Length(a: v)
        Î¸ = acos(v[1] / r)
        // convert -pi..pi to 0..2pi
        Ï† = atan2(v[0], v[2])
        Ï† = Ï† < 0 ? 2.0 * Double.pi + Ï† : Ï†
    }
    
    init () {
    }
    
    func ToVector() -> Vector {
        let a = Vector( [ r * sin(Î¸) * sin(Ï†),  r * cos(Î¸), r * sin(Î¸) * cos(Ï†) ] )
        return a
    }
}
